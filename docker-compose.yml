version: '2.1'

services:
  backend-base:
    build: ./backend
    env_file: ./backend/.env
    volumes:
      - ./backend:/backend
      - /backend/node_modules

  http-backend:
    extends: backend-base
    entrypoint: node src/bin/http-server.js
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:4000/health_check"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - postgres
      - rabbitmq

  web-socket-backend:
    extends: backend-base
    entrypoint: node src/bin/web-socket-server.js
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - postgres
      - rabbitmq

  command-bot:
    extends: backend-base
    entrypoint: node src/bin/command-bot.js
    links:
      - rabbitmq

  postgres:
    image: postgres:9.6-alpine
    ports:
      - 5432
    env_file: ./backend/.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "8080:15672"
      - "5672:5672"
      - "25675:25676"

  migrate-up:
    extends: backend-base
    entrypoint: node_modules/.bin/sequelize db:migrate --config src/config/sequelize.js --migrations-path src/ports/sequelize/migrations/
    depends_on:
      postgres:
        condition: service_healthy

  migrate-down:
    extends: backend-base
    entrypoint: node_modules/.bin/sequelize db:migrate:undo --config src/config/sequelize.js --migrations-path src/ports/sequelize/migrations/
    depends_on:
      postgres:
        condition: service_healthy

  frontend:
    build: ./frontend
    stdin_open: true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
    depends_on:
      http-backend:
        condition: service_healthy
    links:
      - http-backend
